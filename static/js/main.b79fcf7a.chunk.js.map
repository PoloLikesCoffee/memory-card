{"version":3,"sources":["components/Header.js","components/cards/CardItem.js","components/cards/CardsContainer.js","components/scoreboard/ScoreboardContainer.js","components/levelboard/LevelBoardContainer.js","components/Main.js","App.js","index.js"],"names":["Header","className","CardItem","card","id","handleClick","onClick","data-card","src","sprite","alt","name","CardsContainer","cards","cardItems","map","ScoreboardContainer","currentScore","bestScore","LevelBoardContainer","setGameLvlEasy","setGameLvlNormal","setGameLvlHard","Main","useState","setCards","setCurrentScore","setBestScore","clickedCards","setClickedCards","useEffect","loadCards","numberCards","a","shuffleCards","fetchCards","nb","i","fetch","response","json","capitalizeFirstLetter","sprites","default","push","array","randomIndex","currentIndex","length","Math","floor","random","word","charAt","toUpperCase","slice","resetGame","incrementScore","cardId","newScore","prevState","event","console","log","target","parentNode","dataset","includes","App","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b79fcf7a.chunk.js","sourcesContent":["import React from 'react';\n\nconst Header = () => {\n\treturn (\n\t\t<div className=\"header\">\n\t\t\t<i className=\"fas fa-brain\"></i> Memory Card Game\n\t\t</div>\n\t);\n};\n\nexport default Header;\n","import React from 'react';\n\nconst CardItem = ({ card, id, handleClick }) => {\n\treturn (\n\t\t<div className=\"card\" onClick={handleClick} data-card={id}>\n\t\t\t<img src={card.sprite} alt={card.name} />\n\t\t\t<h3>{card.name}</h3>\n\t\t</div>\n\t);\n};\n\nexport default CardItem;\n","import React from 'react';\nimport CardItem from './CardItem';\n\nconst CardsContainer = ({ cards, handleClick }) => {\n\tconst cardItems = cards.map((card) => (\n\t\t<CardItem\n\t\t\tkey={card.id}\n\t\t\tid={card.id}\n\t\t\tcard={card}\n\t\t\thandleClick={handleClick}\n\t\t/>\n\t));\n\treturn <div className=\"cards-container\">{cardItems}</div>;\n};\n\nexport default CardsContainer;\n","import React from 'react';\n\nconst ScoreboardContainer = ({ currentScore, bestScore }) => {\n\treturn (\n\t\t<div className=\"scoreboard-container\">\n\t\t\t<div className=\"current-score\">Current score = {currentScore}</div>\n\t\t\t<div className=\"best-score\">Best score = {bestScore}</div>\n\t\t</div>\n\t);\n};\n\nexport default ScoreboardContainer;\n","import React from 'react';\n\nconst LevelBoardContainer = ({\n\tsetGameLvlEasy,\n\tsetGameLvlNormal,\n\tsetGameLvlHard,\n}) => {\n\treturn (\n\t\t<div className=\"level-container\">\n\t\t\t<button className=\"btn\" onClick={setGameLvlEasy}>\n\t\t\t\teasy\n\t\t\t</button>\n\t\t\t<button className=\"btn\" onClick={setGameLvlNormal}>\n\t\t\t\tnormal\n\t\t\t</button>\n\t\t\t<button className=\"btn\" onClick={setGameLvlHard}>\n\t\t\t\thard\n\t\t\t</button>\n\t\t</div>\n\t);\n};\n\nexport default LevelBoardContainer;\n","import React, { useState, useEffect } from 'react';\nimport CardsContainer from './cards/CardsContainer';\nimport ScoreboardContainer from './scoreboard/ScoreboardContainer';\nimport LevelBoardContainer from './levelboard/LevelBoardContainer';\n\nconst Main = () => {\n\tconst numberCards = 0;\n\t//const numberCards = 14;\n\tconst [cards, setCards] = useState([]);\n\tconst [currentScore, setCurrentScore] = useState(0);\n\tconst [bestScore, setBestScore] = useState(0);\n\tconst [clickedCards, setClickedCards] = useState([]);\n\n\t// useEffect(() => {\n\t// \tconst loadCards = async () => {\n\t// \t\tsetCards(shuffleCards(await fetchCards(numberCards)));\n\t// \t};\n\t// \tloadCards();\n\t// }, []);\n\n\tuseEffect(() => {\n\t\tloadCards(numberCards);\n\t}, []);\n\n\t// start game\n\tconst loadCards = async (numberCards) => {\n\t\tsetCards(shuffleCards(await fetchCards(numberCards)));\n\t};\n\n\t// get cards elements from poke API\n\tconst fetchCards = async (nb) => {\n\t\tconst cards = [];\n\t\tfor (let i = 1; i <= nb; i++) {\n\t\t\tconst response = await fetch(`https://pokeapi.co/api/v2/item/${i}/\n            `);\n\t\t\tconst card = await response.json();\n\t\t\tconst name = capitalizeFirstLetter(card.name);\n\t\t\tconst id = card.id;\n\t\t\tconst sprite = card.sprites.default;\n\t\t\tcards.push({ name, id, sprite });\n\t\t}\n\t\treturn cards;\n\t};\n\n\t// shuffle the cards randomly\n\tconst shuffleCards = (array) => {\n\t\tlet currentIndex = array.length,\n\t\t\trandomIndex;\n\t\t// While there remain elements to shuffle...\n\t\twhile (0 !== currentIndex) {\n\t\t\t// Pick a remaining element...\n\t\t\trandomIndex = Math.floor(Math.random() * currentIndex);\n\t\t\tcurrentIndex--;\n\t\t\t// And swap it with the current element\n\t\t\t[array[currentIndex], array[randomIndex]] = [\n\t\t\t\tarray[randomIndex],\n\t\t\t\tarray[currentIndex],\n\t\t\t];\n\t\t}\n\t\treturn array;\n\t};\n\n\t// capitalize first letter of the card name\n\tconst capitalizeFirstLetter = (word) => {\n\t\treturn word.charAt(0).toUpperCase() + word.slice(1);\n\t};\n\n\t// handle click on card\n\tconst handleClick = (event) => {\n\t\t//console.log(event.target.parentNode.dataset.card);\n\t\tconst cardId = event.target.parentNode.dataset;\n\t\tif (clickedCards.includes(cardId)) {\n\t\t\tresetGame();\n\t\t} else {\n\t\t\tincrementScore(cardId);\n\t\t}\n\t};\n\n\t// reset game\n\tconst resetGame = () => {\n\t\tsetClickedCards([]);\n\t\tsetCurrentScore(0);\n\t};\n\n\t// increment score when clicked and add clicked card to clickedCards array\n\tconst incrementScore = (cardId) => {\n\t\tconst newScore = currentScore + 1;\n\t\tif (newScore > bestScore) setBestScore(newScore);\n\t\tsetCurrentScore(newScore);\n\t\tsetClickedCards((prevState) => [...prevState, cardId]);\n\t\tsetCards(shuffleCards(cards));\n\t};\n\n\t// level difficulty\n\tconst setGameLvlEasy = (event) => {\n\t\tconsole.log('Level EASY');\n\t\tloadCards(7);\n\t\tresetGame();\n\t\tsetBestScore(0);\n\t};\n\tconst setGameLvlNormal = (event) => {\n\t\tconsole.log('Level NORMAL');\n\t\tloadCards(14);\n\t\tresetGame();\n\t\tsetBestScore(0);\n\t};\n\tconst setGameLvlHard = (event) => {\n\t\tconsole.log('Level HARD');\n\t\tloadCards(21);\n\t\tresetGame();\n\t\tsetBestScore(0);\n\t};\n\n\treturn (\n\t\t<div className=\"main\">\n\t\t\t<ScoreboardContainer currentScore={currentScore} bestScore={bestScore} />\n\t\t\t<LevelBoardContainer\n\t\t\t\tsetGameLvlEasy={setGameLvlEasy}\n\t\t\t\tsetGameLvlNormal={setGameLvlNormal}\n\t\t\t\tsetGameLvlHard={setGameLvlHard}\n\t\t\t/>\n\t\t\t<CardsContainer cards={cards} handleClick={handleClick} />\n\t\t</div>\n\t);\n};\n\nexport default Main;\n","import React, { Component } from 'react';\nimport Header from './components/Header';\nimport Main from './components/Main';\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<Header />\n\t\t\t\t<Main />\n\t\t\t</>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n"],"sourceRoot":""}